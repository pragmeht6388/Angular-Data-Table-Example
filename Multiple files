using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;

namespace YourNamespace.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ImageController : ControllerBase
    {
        private readonly string _imageBasePath = @"C:\MyApp\Storage\Images";

        // GET: api/image/{fileName}
        [HttpGet("{fileName}")]
        public IActionResult GetImage(string fileName)
        {
            var filePath = Path.Combine(_imageBasePath, fileName);

            if (!System.IO.File.Exists(filePath))
                return NotFound();

            var imageBytes = System.IO.File.ReadAllBytes(filePath);
            var contentType = GetContentType(filePath);

            return File(imageBytes, contentType);
        }

        // POST: api/image/multiple
        [HttpPost("multiple")]
        public IActionResult GetMultipleImages([FromBody] List<string> fileNames)
        {
            if (fileNames == null || fileNames.Count == 0)
                return BadRequest("No file names provided.");

            var zipStream = new MemoryStream();

            using (var archive = new ZipArchive(zipStream, ZipArchiveMode.Create, true))
            {
                foreach (var fileName in fileNames)
                {
                    var filePath = Path.Combine(_imageBasePath, fileName);

                    if (!System.IO.File.Exists(filePath))
                        continue;

                    var entry = archive.CreateEntry(fileName, CompressionLevel.Fastest);
                    using var entryStream = entry.Open();
                    using var fileStream = System.IO.File.OpenRead(filePath);
                    fileStream.CopyTo(entryStream);
                }
            }

            zipStream.Position = 0;
            return File(zipStream, "application/zip", "images.zip");
        }

        private string GetContentType(string path)
        {
            var ext = Path.GetExtension(path).ToLowerInvariant();
            return ext switch
            {
                ".jpg" or ".jpeg" => "image/jpeg",
                ".png" => "image/png",
                ".gif" => "image/gif",
                _ => "application/octet-stream"
            };
        }
    }
}
