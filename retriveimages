using Microsoft.AspNetCore.Mvc;
using System.IO;
using Microsoft.AspNetCore.Hosting;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;

[Route("api/images")]
[ApiController]
public class ImageController : ControllerBase
{
    private readonly IWebHostEnvironment _webHostEnvironment;

    public ImageController(IWebHostEnvironment webHostEnvironment)
    {
        _webHostEnvironment = webHostEnvironment;
    }

    [HttpGet("{imageName}")]
    public async Task<IActionResult> GetImage(string imageName)
    {
        // Set the path to your custom folder
        var imagePath = Path.Combine(_webHostEnvironment.WebRootPath, "images", imageName);

        // Check if the image exists
        if (!System.IO.File.Exists(imagePath))
        {
            return NotFound("Image not found");
        }

        // Read the image from the file system
        var imageBytes = await System.IO.File.ReadAllBytesAsync(imagePath);
        
        // Return the image as a response with the appropriate content type
        return File(imageBytes, "image/jpeg");
    }
}



var builder = WebApplication.CreateBuilder(args);

// Enable static file serving
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

app.UseStaticFiles(); // Enable static file serving for wwwroot folder

app.MapGet("/", () => "Hello World!");

app.MapControllers();

app.Run();
---------------------use this code-----------------------

[ApiController]
[Route("api/[controller]")]
public class ImageController : ControllerBase
{
    private readonly string _imageBasePath = @"C:\MyApp\Storage\Images";

    [HttpGet("{fileName}")]
    public IActionResult GetImage(string fileName)
    {
        var filePath = Path.Combine(_imageBasePath, fileName);

        if (!System.IO.File.Exists(filePath))
            return NotFound();

        var imageBytes = System.IO.File.ReadAllBytes(filePath);
        var contentType = GetContentType(filePath);

        return File(imageBytes, contentType);
    }

    private string GetContentType(string path)
    {
        var ext = Path.GetExtension(path).ToLowerInvariant();
        return ext switch
        {
            ".jpg" or ".jpeg" => "image/jpeg",
            ".png" => "image/png",
            ".gif" => "image/gif",
            _ => "application/octet-stream"
        };
    }
}


000000-------------try this one------------\


using System;
using System.IO;
using System.Web.Http;
using System.Net.Http;
using System.Net;

namespace YourNamespace.Controllers
{
    public class ImageController : ApiController
    {
        [HttpGet]
        [Route("api/image/{imageName}")]
        public HttpResponseMessage GetImage(string imageName)
        {
            try
            {
                // Path to the image file, make sure the file exists
                var imagePath = Path.Combine("path_to_your_images_folder", imageName);

                if (!File.Exists(imagePath))
                {
                    return Request.CreateErrorResponse(HttpStatusCode.NotFound, "Image not found.");
                }

                // Open the file stream for the image
                using (FileStream fileStream = new FileStream(imagePath, FileMode.Open, FileAccess.Read))
                {
                    // Read the file into a byte array
                    byte[] imageBytes = new byte[fileStream.Length];
                    fileStream.Read(imageBytes, 0, imageBytes.Length);

                    // Create the response with the image content
                    var response = Request.CreateResponse(HttpStatusCode.OK);
                    response.Content = new ByteArrayContent(imageBytes);
                    response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("image/jpeg"); // Or the correct MIME type for your image (e.g., image/png)
                    
                    return response;
                }
            }
            catch (Exception ex)
            {
                return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, ex.Message);
            }
        }
    }
}







